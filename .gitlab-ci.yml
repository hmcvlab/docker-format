---
stages:
  - static-analysis
  - build
  - test
  - push

variables:
  CI_URL: "${CI_REGISTRY}/messtechnik-labor/docker"
  LINT_IMAGE: "${CI_URL}/lint:latest"
  LABEL: "maintainer=messtechnik-labor"

default:
  tags: [x86_64]
  retry: 2

.template_docker:
  image: docker:dind
  rules:
    - if: "$CI_COMMIT_TAG"
  before_script:
    - df -h
    - docker system prune -a -f --filter "until=72h" --filter "label=${LABEL}"
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}

# prepare

lint:
  image: ${LINT_IMAGE}
  needs: []
  rules:
    - if: "$CI_COMMIT_TAG"
  stage: static-analysis
  script:
    - lint

# build

build:
  needs: ["lint"]
  stage: build
  script:
    - docker buildx create --use
    - |
      docker buildx build \
      -t "${CI_REGISTRY_IMAGE}/tmp:${CI_COMMIT_TAG}" \
      --label "${LABEL}" \
      --platform linux/amd64,linux/arm64/v8 \
      --file Dockerfile \
      --push .

# test

.template_test:
  image:
    name: "${CI_REGISTRY_IMAGE}/tmp:${CI_COMMIT_TAG}"
    entrypoint: [""]
  needs: [build]
  rules:
    - if: "$CI_COMMIT_TAG"
  stage: test
  script:
    - pytest

amd_test:
  extends: .template_test

arm_test:
  extends: .template_test
  tags: [aarch64]

# push

push:
  extends: .template_docker
  needs: ["amd_test", "arm_test"]
  stage: push
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
    - tmp_image="${CI_REGISTRY_IMAGE}/tmp:${CI_COMMIT_TAG}"
    - docker pull "$tmp_image"
    - docker tag "$tmp_image" "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
    - docker tag "$tmp_image" "${CI_REGISTRY_IMAGE}:latest"
    - docker push --all-tags "${CI_REGISTRY_IMAGE}"
